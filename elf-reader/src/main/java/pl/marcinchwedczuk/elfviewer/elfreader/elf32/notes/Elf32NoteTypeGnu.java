package pl.marcinchwedczuk.elfviewer.elfreader.elf32.notes;

import pl.marcinchwedczuk.elfviewer.elfreader.meta.ElfApi;
import pl.marcinchwedczuk.elfviewer.elfreader.utils.IntPartialEnum;

import java.util.Collection;
import java.util.Map;
import java.util.concurrent.atomic.AtomicReference;

/**
 * Applicable to notes with name = "GNU".
 */
public class Elf32NoteTypeGnu extends IntPartialEnum<Elf32NoteTypeGnu> {
    private static final Map<Integer, Elf32NoteTypeGnu> byValue = mkByValueMap();
    private static final Map<String, Elf32NoteTypeGnu> byName = mkByNameMap();

    /**
     * Operating system (OS) ABI information.  The
     * descriptor field will be 4 words:
     * <p>
     * <ul>
     *  <li>word 0: OS descriptor (ELF_NOTE_OS_LINUX, ELF_NOTE_OS_GNU, and so on)</li>
     *  <li>word 1: major version of the ABI</li>
     *  <li>word 2: minor version of the ABI</li>
     *  <li>word 3: subminor version of the ABI</li>
     * </ul>
     */
    @ElfApi("NT_GNU_ABI_TAG")
    public static final Elf32NoteTypeGnu GNU_ABI_TAG = new Elf32NoteTypeGnu(1, "GNU_ABI_TAG");

    /**
     * Synthetic hwcap information.  The desc field
     * begins with two words:
     * <p>
     * <ul>
     *  <li>word 0: number of entries</li>
     *  <li>word 1: bit mask of enabled entries</li>
     * </ul>
     * <p>
     * Then follow variable-length entries, one byte
     * followed by a null-terminated hwcap name
     * string.  The byte gives the bit number to test
     * if enabled, (1U << bit) & bit mask.
     */
    @ElfApi("NT_GNU_HWCAP")
    public static final Elf32NoteTypeGnu GNU_HWCAP = new Elf32NoteTypeGnu(2, "GNU_HWCAP");

    /**
     * Unique build ID as generated by the GNU ld(1)
     * --build-id option.  The desc consists of any
     * nonzero number of bytes.
     */
    @ElfApi("NT_GNU_BUILD_ID")
    public static final Elf32NoteTypeGnu GNU_BUILD_ID = new Elf32NoteTypeGnu(3, "GNU_BUILD_ID");

    /**
     * The desc contains the GNU Gold linker version
     * used.
     */
    @ElfApi("NT_GNU_GOLD_VERSION")
    public static final Elf32NoteTypeGnu GNU_GOLD_VERSION = new Elf32NoteTypeGnu(4, "GNU_GOLD_VERSION");

    @ElfApi("GNU_PROPERTY_TYPE_0")
    public static final Elf32NoteTypeGnu GNU_PROPERTY_TYPE_0 = new Elf32NoteTypeGnu(5, "GNU_PROPERTY_TYPE_0");

    protected Elf32NoteTypeGnu(int value) {
        super(value);
    }

    protected Elf32NoteTypeGnu(int value, String name) {
        super(value, name, byValue, byName);
    }

    public static Elf32NoteTypeGnu fromValue(int value) {
        return IntPartialEnum.fromValueOrCreate(value, byValue, Elf32NoteTypeGnu::new);
    }

    public static Elf32NoteTypeGnu fromName(String name) {
        return IntPartialEnum.fromName(name, byName);
    }

    public static Collection<Elf32NoteTypeGnu> knownValues() {
        return IntPartialEnum.knownValues(byValue);
    }

    private static AtomicReference<Map<String, String>> name2apiNameMappingContainer = new AtomicReference<>(null);
    @Override
    protected AtomicReference<Map<String, String>> name2apiNameMappingContainer() {
        return name2apiNameMappingContainer;
    }
}
